// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: recording.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>
/// A namespace generated using protobuf. Used by other classes for converting to binary format for ease of storage and transport acrosss the web.
/// </summary>
/// <remarks>
/// Below is the protobuf file used to generate the transport namespace:
/// <code>syntax = "proto3";
/// package recolude;
/// option csharp_namespace = "EliCDavis.RecordAndPlay.Transport";
///
/// message Recording {
/// &emsp; string name = 1;
/// &emsp; map<string, string> metadata = 2;
/// &emsp; repeated SubjectRecording subjects = 3;
/// &emsp; repeated CustomEventCapture customEvents = 4;
/// }
///
/// message SubjectRecording {
/// &emsp; int32 id = 1;
/// &emsp; string name = 2;
/// &emsp; map<string, string> metadata = 3;
/// &emsp; repeated CustomEventCapture customEvents = 4;
/// &emsp; repeated LifeCycleEventCapture lifecycleEvents = 5;
/// &emsp; repeated VectorCapture capturedPositions = 6;
/// &emsp; repeated VectorCapture capturedRotations = 7;
/// }
///
/// message CustomEventCapture {
/// &emsp; float time = 1;
/// &emsp; string name = 2;
/// &emsp; string contents = 3;
/// }
///
/// message LifeCycleEventCapture {
/// &emsp; float time = 1;
/// &emsp; enum LifeType {
/// &emsp; &emsp; START = 0;
/// &emsp; &emsp; ENABLE = 1;
/// &emsp; &emsp; DISABLE = 2;
/// &emsp; &emsp; DESTROY = 3;
/// &emsp; }
/// &emsp; LifeType type = 2;
/// }
///
/// message VectorCapture {
/// &emsp; float time = 1;
/// &emsp; float x = 2;
/// &emsp; float y = 3;
/// &emsp; float z = 4;
/// }
/// 
/// </code>
/// </remarks>
namespace EliCDavis.RecordAndPlay.Transport {

  /// <summary>Holder for reflection information generated from recording.proto</summary>
  public static partial class RecordingReflection {

    #region Descriptor
    /// <summary>File descriptor for recording.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RecordingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9yZWNvcmRpbmcucHJvdG8SCHJlY29sdWRlIuEBCglSZWNvcmRpbmcSDAoE",
            "bmFtZRgBIAEoCRIzCghtZXRhZGF0YRgCIAMoCzIhLnJlY29sdWRlLlJlY29y",
            "ZGluZy5NZXRhZGF0YUVudHJ5EiwKCHN1YmplY3RzGAMgAygLMhoucmVjb2x1",
            "ZGUuU3ViamVjdFJlY29yZGluZxIyCgxjdXN0b21FdmVudHMYBCADKAsyHC5y",
            "ZWNvbHVkZS5DdXN0b21FdmVudENhcHR1cmUaLwoNTWV0YWRhdGFFbnRyeRIL",
            "CgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIu8CChBTdWJqZWN0UmVj",
            "b3JkaW5nEgoKAmlkGAEgASgFEgwKBG5hbWUYAiABKAkSOgoIbWV0YWRhdGEY",
            "AyADKAsyKC5yZWNvbHVkZS5TdWJqZWN0UmVjb3JkaW5nLk1ldGFkYXRhRW50",
            "cnkSMgoMY3VzdG9tRXZlbnRzGAQgAygLMhwucmVjb2x1ZGUuQ3VzdG9tRXZl",
            "bnRDYXB0dXJlEjgKD2xpZmVjeWNsZUV2ZW50cxgFIAMoCzIfLnJlY29sdWRl",
            "LkxpZmVDeWNsZUV2ZW50Q2FwdHVyZRIyChFjYXB0dXJlZFBvc2l0aW9ucxgG",
            "IAMoCzIXLnJlY29sdWRlLlZlY3RvckNhcHR1cmUSMgoRY2FwdHVyZWRSb3Rh",
            "dGlvbnMYByADKAsyFy5yZWNvbHVkZS5WZWN0b3JDYXB0dXJlGi8KDU1ldGFk",
            "YXRhRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASJCChJD",
            "dXN0b21FdmVudENhcHR1cmUSDAoEdGltZRgBIAEoAhIMCgRuYW1lGAIgASgJ",
            "EhAKCGNvbnRlbnRzGAMgASgJIpoBChVMaWZlQ3ljbGVFdmVudENhcHR1cmUS",
            "DAoEdGltZRgBIAEoAhI2CgR0eXBlGAIgASgOMigucmVjb2x1ZGUuTGlmZUN5",
            "Y2xlRXZlbnRDYXB0dXJlLkxpZmVUeXBlIjsKCExpZmVUeXBlEgkKBVNUQVJU",
            "EAASCgoGRU5BQkxFEAESCwoHRElTQUJMRRACEgsKB0RFU1RST1kQAyI+Cg1W",
            "ZWN0b3JDYXB0dXJlEgwKBHRpbWUYASABKAISCQoBeBgCIAEoAhIJCgF5GAMg",
            "ASgCEgkKAXoYBCABKAJCJKoCIUVsaUNEYXZpcy5SZWNvcmRBbmRQbGF5LlRy",
            "YW5zcG9ydGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::EliCDavis.RecordAndPlay.Transport.Recording), global::EliCDavis.RecordAndPlay.Transport.Recording.Parser, new[]{ "Name", "Metadata", "Subjects", "CustomEvents" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::EliCDavis.RecordAndPlay.Transport.SubjectRecording), global::EliCDavis.RecordAndPlay.Transport.SubjectRecording.Parser, new[]{ "Id", "Name", "Metadata", "CustomEvents", "LifecycleEvents", "CapturedPositions", "CapturedRotations" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::EliCDavis.RecordAndPlay.Transport.CustomEventCapture), global::EliCDavis.RecordAndPlay.Transport.CustomEventCapture.Parser, new[]{ "Time", "Name", "Contents" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EliCDavis.RecordAndPlay.Transport.LifeCycleEventCapture), global::EliCDavis.RecordAndPlay.Transport.LifeCycleEventCapture.Parser, new[]{ "Time", "Type" }, null, new[]{ typeof(global::EliCDavis.RecordAndPlay.Transport.LifeCycleEventCapture.Types.LifeType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EliCDavis.RecordAndPlay.Transport.VectorCapture), global::EliCDavis.RecordAndPlay.Transport.VectorCapture.Parser, new[]{ "Time", "X", "Y", "Z" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Recording : pb::IMessage<Recording> {
    private static readonly pb::MessageParser<Recording> _parser = new pb::MessageParser<Recording>(() => new Recording());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Recording> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EliCDavis.RecordAndPlay.Transport.RecordingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Recording() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Recording(Recording other) : this() {
      name_ = other.name_;
      metadata_ = other.metadata_.Clone();
      subjects_ = other.subjects_.Clone();
      customEvents_ = other.customEvents_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Recording Clone() {
      return new Recording(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_metadata_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> metadata_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Metadata {
      get { return metadata_; }
    }

    /// <summary>Field number for the "subjects" field.</summary>
    public const int SubjectsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::EliCDavis.RecordAndPlay.Transport.SubjectRecording> _repeated_subjects_codec
        = pb::FieldCodec.ForMessage(26, global::EliCDavis.RecordAndPlay.Transport.SubjectRecording.Parser);
    private readonly pbc::RepeatedField<global::EliCDavis.RecordAndPlay.Transport.SubjectRecording> subjects_ = new pbc::RepeatedField<global::EliCDavis.RecordAndPlay.Transport.SubjectRecording>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::EliCDavis.RecordAndPlay.Transport.SubjectRecording> Subjects {
      get { return subjects_; }
    }

    /// <summary>Field number for the "customEvents" field.</summary>
    public const int CustomEventsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::EliCDavis.RecordAndPlay.Transport.CustomEventCapture> _repeated_customEvents_codec
        = pb::FieldCodec.ForMessage(34, global::EliCDavis.RecordAndPlay.Transport.CustomEventCapture.Parser);
    private readonly pbc::RepeatedField<global::EliCDavis.RecordAndPlay.Transport.CustomEventCapture> customEvents_ = new pbc::RepeatedField<global::EliCDavis.RecordAndPlay.Transport.CustomEventCapture>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::EliCDavis.RecordAndPlay.Transport.CustomEventCapture> CustomEvents {
      get { return customEvents_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Recording);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Recording other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!Metadata.Equals(other.Metadata)) return false;
      if(!subjects_.Equals(other.subjects_)) return false;
      if(!customEvents_.Equals(other.customEvents_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= Metadata.GetHashCode();
      hash ^= subjects_.GetHashCode();
      hash ^= customEvents_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      metadata_.WriteTo(output, _map_metadata_codec);
      subjects_.WriteTo(output, _repeated_subjects_codec);
      customEvents_.WriteTo(output, _repeated_customEvents_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += metadata_.CalculateSize(_map_metadata_codec);
      size += subjects_.CalculateSize(_repeated_subjects_codec);
      size += customEvents_.CalculateSize(_repeated_customEvents_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Recording other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      metadata_.Add(other.metadata_);
      subjects_.Add(other.subjects_);
      customEvents_.Add(other.customEvents_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            metadata_.AddEntriesFrom(input, _map_metadata_codec);
            break;
          }
          case 26: {
            subjects_.AddEntriesFrom(input, _repeated_subjects_codec);
            break;
          }
          case 34: {
            customEvents_.AddEntriesFrom(input, _repeated_customEvents_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubjectRecording : pb::IMessage<SubjectRecording> {
    private static readonly pb::MessageParser<SubjectRecording> _parser = new pb::MessageParser<SubjectRecording>(() => new SubjectRecording());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubjectRecording> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EliCDavis.RecordAndPlay.Transport.RecordingReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubjectRecording() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubjectRecording(SubjectRecording other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      metadata_ = other.metadata_.Clone();
      customEvents_ = other.customEvents_.Clone();
      lifecycleEvents_ = other.lifecycleEvents_.Clone();
      capturedPositions_ = other.capturedPositions_.Clone();
      capturedRotations_ = other.capturedRotations_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubjectRecording Clone() {
      return new SubjectRecording(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 3;
    private static readonly pbc::MapField<string, string>.Codec _map_metadata_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 26);
    private readonly pbc::MapField<string, string> metadata_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Metadata {
      get { return metadata_; }
    }

    /// <summary>Field number for the "customEvents" field.</summary>
    public const int CustomEventsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::EliCDavis.RecordAndPlay.Transport.CustomEventCapture> _repeated_customEvents_codec
        = pb::FieldCodec.ForMessage(34, global::EliCDavis.RecordAndPlay.Transport.CustomEventCapture.Parser);
    private readonly pbc::RepeatedField<global::EliCDavis.RecordAndPlay.Transport.CustomEventCapture> customEvents_ = new pbc::RepeatedField<global::EliCDavis.RecordAndPlay.Transport.CustomEventCapture>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::EliCDavis.RecordAndPlay.Transport.CustomEventCapture> CustomEvents {
      get { return customEvents_; }
    }

    /// <summary>Field number for the "lifecycleEvents" field.</summary>
    public const int LifecycleEventsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::EliCDavis.RecordAndPlay.Transport.LifeCycleEventCapture> _repeated_lifecycleEvents_codec
        = pb::FieldCodec.ForMessage(42, global::EliCDavis.RecordAndPlay.Transport.LifeCycleEventCapture.Parser);
    private readonly pbc::RepeatedField<global::EliCDavis.RecordAndPlay.Transport.LifeCycleEventCapture> lifecycleEvents_ = new pbc::RepeatedField<global::EliCDavis.RecordAndPlay.Transport.LifeCycleEventCapture>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::EliCDavis.RecordAndPlay.Transport.LifeCycleEventCapture> LifecycleEvents {
      get { return lifecycleEvents_; }
    }

    /// <summary>Field number for the "capturedPositions" field.</summary>
    public const int CapturedPositionsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::EliCDavis.RecordAndPlay.Transport.VectorCapture> _repeated_capturedPositions_codec
        = pb::FieldCodec.ForMessage(50, global::EliCDavis.RecordAndPlay.Transport.VectorCapture.Parser);
    private readonly pbc::RepeatedField<global::EliCDavis.RecordAndPlay.Transport.VectorCapture> capturedPositions_ = new pbc::RepeatedField<global::EliCDavis.RecordAndPlay.Transport.VectorCapture>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::EliCDavis.RecordAndPlay.Transport.VectorCapture> CapturedPositions {
      get { return capturedPositions_; }
    }

    /// <summary>Field number for the "capturedRotations" field.</summary>
    public const int CapturedRotationsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::EliCDavis.RecordAndPlay.Transport.VectorCapture> _repeated_capturedRotations_codec
        = pb::FieldCodec.ForMessage(58, global::EliCDavis.RecordAndPlay.Transport.VectorCapture.Parser);
    private readonly pbc::RepeatedField<global::EliCDavis.RecordAndPlay.Transport.VectorCapture> capturedRotations_ = new pbc::RepeatedField<global::EliCDavis.RecordAndPlay.Transport.VectorCapture>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::EliCDavis.RecordAndPlay.Transport.VectorCapture> CapturedRotations {
      get { return capturedRotations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubjectRecording);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubjectRecording other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (!Metadata.Equals(other.Metadata)) return false;
      if(!customEvents_.Equals(other.customEvents_)) return false;
      if(!lifecycleEvents_.Equals(other.lifecycleEvents_)) return false;
      if(!capturedPositions_.Equals(other.capturedPositions_)) return false;
      if(!capturedRotations_.Equals(other.capturedRotations_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= Metadata.GetHashCode();
      hash ^= customEvents_.GetHashCode();
      hash ^= lifecycleEvents_.GetHashCode();
      hash ^= capturedPositions_.GetHashCode();
      hash ^= capturedRotations_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      metadata_.WriteTo(output, _map_metadata_codec);
      customEvents_.WriteTo(output, _repeated_customEvents_codec);
      lifecycleEvents_.WriteTo(output, _repeated_lifecycleEvents_codec);
      capturedPositions_.WriteTo(output, _repeated_capturedPositions_codec);
      capturedRotations_.WriteTo(output, _repeated_capturedRotations_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += metadata_.CalculateSize(_map_metadata_codec);
      size += customEvents_.CalculateSize(_repeated_customEvents_codec);
      size += lifecycleEvents_.CalculateSize(_repeated_lifecycleEvents_codec);
      size += capturedPositions_.CalculateSize(_repeated_capturedPositions_codec);
      size += capturedRotations_.CalculateSize(_repeated_capturedRotations_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubjectRecording other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      metadata_.Add(other.metadata_);
      customEvents_.Add(other.customEvents_);
      lifecycleEvents_.Add(other.lifecycleEvents_);
      capturedPositions_.Add(other.capturedPositions_);
      capturedRotations_.Add(other.capturedRotations_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            metadata_.AddEntriesFrom(input, _map_metadata_codec);
            break;
          }
          case 34: {
            customEvents_.AddEntriesFrom(input, _repeated_customEvents_codec);
            break;
          }
          case 42: {
            lifecycleEvents_.AddEntriesFrom(input, _repeated_lifecycleEvents_codec);
            break;
          }
          case 50: {
            capturedPositions_.AddEntriesFrom(input, _repeated_capturedPositions_codec);
            break;
          }
          case 58: {
            capturedRotations_.AddEntriesFrom(input, _repeated_capturedRotations_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CustomEventCapture : pb::IMessage<CustomEventCapture> {
    private static readonly pb::MessageParser<CustomEventCapture> _parser = new pb::MessageParser<CustomEventCapture>(() => new CustomEventCapture());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CustomEventCapture> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EliCDavis.RecordAndPlay.Transport.RecordingReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomEventCapture() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomEventCapture(CustomEventCapture other) : this() {
      time_ = other.time_;
      name_ = other.name_;
      contents_ = other.contents_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomEventCapture Clone() {
      return new CustomEventCapture(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private float time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contents" field.</summary>
    public const int ContentsFieldNumber = 3;
    private string contents_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Contents {
      get { return contents_; }
      set {
        contents_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CustomEventCapture);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CustomEventCapture other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Time, other.Time)) return false;
      if (Name != other.Name) return false;
      if (Contents != other.Contents) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Time);
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Contents.Length != 0) hash ^= Contents.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Time);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Contents.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Contents);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0F) {
        size += 1 + 4;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Contents.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Contents);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CustomEventCapture other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0F) {
        Time = other.Time;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Contents.Length != 0) {
        Contents = other.Contents;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Time = input.ReadFloat();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Contents = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LifeCycleEventCapture : pb::IMessage<LifeCycleEventCapture> {
    private static readonly pb::MessageParser<LifeCycleEventCapture> _parser = new pb::MessageParser<LifeCycleEventCapture>(() => new LifeCycleEventCapture());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LifeCycleEventCapture> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EliCDavis.RecordAndPlay.Transport.RecordingReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LifeCycleEventCapture() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LifeCycleEventCapture(LifeCycleEventCapture other) : this() {
      time_ = other.time_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LifeCycleEventCapture Clone() {
      return new LifeCycleEventCapture(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private float time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::EliCDavis.RecordAndPlay.Transport.LifeCycleEventCapture.Types.LifeType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EliCDavis.RecordAndPlay.Transport.LifeCycleEventCapture.Types.LifeType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LifeCycleEventCapture);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LifeCycleEventCapture other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Time, other.Time)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Time);
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Time);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0F) {
        size += 1 + 4;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LifeCycleEventCapture other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0F) {
        Time = other.Time;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Time = input.ReadFloat();
            break;
          }
          case 16: {
            Type = (global::EliCDavis.RecordAndPlay.Transport.LifeCycleEventCapture.Types.LifeType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LifeCycleEventCapture message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum LifeType {
        [pbr::OriginalName("START")] Start = 0,
        [pbr::OriginalName("ENABLE")] Enable = 1,
        [pbr::OriginalName("DISABLE")] Disable = 2,
        [pbr::OriginalName("DESTROY")] Destroy = 3,
      }

    }
    #endregion

  }

  public sealed partial class VectorCapture : pb::IMessage<VectorCapture> {
    private static readonly pb::MessageParser<VectorCapture> _parser = new pb::MessageParser<VectorCapture>(() => new VectorCapture());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VectorCapture> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EliCDavis.RecordAndPlay.Transport.RecordingReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VectorCapture() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VectorCapture(VectorCapture other) : this() {
      time_ = other.time_;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VectorCapture Clone() {
      return new VectorCapture(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private float time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 4;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VectorCapture);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VectorCapture other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Time, other.Time)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Time);
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Time);
      }
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0F) {
        size += 1 + 4;
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VectorCapture other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0F) {
        Time = other.Time;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Time = input.ReadFloat();
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 37: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
